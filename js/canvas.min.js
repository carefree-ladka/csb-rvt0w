window.onload = function () {
  var canvas = document.getElementById("canvas");
  var ctx = canvas.getContext("2d");
  const mouse = {
    x: undefined,
    y: undefined
  };

  const particalArray = [];
  let hue = 0;

  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
  window.addEventListener("resize", () => {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  });
  canvas.addEventListener("click", (e) => {
    mouse.x = e.x;
    mouse.y = e.y;
    for (let i = 0; i < 10; i++) {
      particalArray.push(new Partical());
    }
    //drawCircle(ctx);
  });
  canvas.addEventListener("mousemove", (e) => {
    mouse.x = e.x;
    mouse.y = e.y;
    for (let i = 0; i < 5; i++) {
      particalArray.push(new Partical());
    }
  });

  class Partical {
    constructor(mouseX, mouseY) {
      this.x = mouse.x;
      this.y = mouse.y;
      this.size = Math.random() * 5 + 1;
      this.speedX = Math.random() * 3 - 1.5;
      this.speedY = Math.random() * 3 - 1.5;
      this.color = "hsl(" + hue + ",100%,50%)";
    }
    update() {
      this.x += this.speedX;
      this.y += this.speedY;
      if (this.size > 0.2) this.size -= 0.1;
    }
    draw(ctx) {
      ctx.fillStyle = this.color;
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
      ctx.fill();
    }
  }

  const animate = () => {
    ctx.fillStyle = "rgba(0,0,0,.02)";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    handlePartical(ctx);
    hue++; //speed of the particals
    requestAnimationFrame(animate);
  };

  const handlePartical = (ctx) => {
    for (let i = 0; i < particalArray.length; i++) {
      particalArray[i].update();
      particalArray[i].draw(ctx);
      for (let j = 0; j < particalArray.length; j++) {
        //Pyhthagorus theorem to calculate distance b/w circles
        const dx = particalArray[i].x - particalArray[j].x;
        const dy = particalArray[i].y - particalArray[j].y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        if (distance < 100) {
          ctx.beginPath();
          ctx.strokeStyle = particalArray[i].color;
          ctx.lineWidth = 0.05;
          ctx.moveTo(particalArray[i].x, particalArray[i].y);
          ctx.lineTo(particalArray[j].x, particalArray[j].y);
          ctx.stroke();
        }
      }
      if (particalArray[i].size <= 0.3) {
        particalArray.splice(i, 1);
        i--;
      }
    }
  };
  animate();
};
